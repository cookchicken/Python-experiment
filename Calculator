import wx

import math

class CalcFrame(wx.Frame):
  def __init__(self, title):
    super(CalcFrame, self).__init__(None, title=title,size=(300, 250))
    self.InitUI()
    self.Centre()
    self.Show()     


  def InitUI(self):
    vbox = wx.BoxSizer(wx.VERTICAL)
    self.textprint = wx.TextCtrl(self, style=wx.TE_RIGHT)
    self.equation=""
    vbox.Add(self.textprint, 1, flag=wx.EXPAND|wx.TOP|wx.BOTTOM, border=4)

    gridBox = wx.GridSizer(6, 4, 5, 5)

    labels=['AC','DEL','pi','CLOSE','7','8','9','/','4','5','6','*','1','2','3','-','0','.','=','+','Sqrt','log','dou','sin']
    for label in labels:
       buttonIterm = wx.Button(self,label=label)
       self.createHandler(buttonIterm,label)
       gridBox.Add(buttonIterm, 1, wx.EXPAND)

    vbox.Add(gridBox, proportion=7, flag=wx.EXPAND)
    self.SetSizer(vbox)

  def createHandler(self,button,labels):
    item = "DEL AC = CLOSE Sqrt log dou sin"
    if labels not in item:
      self.Bind(wx.EVT_BUTTON,self.OnAppend,button)
    elif labels == 'DEL':
      self.Bind(wx.EVT_BUTTON,self.OnDel,button)
    elif labels == 'AC':
      self.Bind(wx.EVT_BUTTON,self.OnAc,button)
    elif labels == '=':
      self.Bind(wx.EVT_BUTTON,self.OnTarget,button)
    elif labels == 'CLOSE':
      self.Bind(wx.EVT_BUTTON,self.OnExit,button)
    elif labels == 'Sqrt':
      self.Bind(wx.EVT_BUTTON,self.OnSqrt,button)
    elif labels == 'log':
      self.Bind(wx.EVT_BUTTON,self.Onlog,button)
    elif labels == 'dou':
      self.Bind(wx.EVT_BUTTON,self.Ondou,button)
    elif labels == 'sin':
      self.Bind(wx.EVT_BUTTON,self.Onsin,button) 

  def OnAppend(self,event):
    eventbutton = event.GetEventObject()
    label = eventbutton.GetLabel()
    self.equation += label
    self.textprint.SetValue(self.equation)

  def OnDel(self,event):
    self.equation = self.equation[:-1]
    self.textprint.SetValue(self.equation)

  def OnAc(self,event):
    self.textprint.Clear()
    self.equation=""

  def OnSqrt(self,event):
    string =float(self.equation)
    try:
       target=math.sqrt(string)
       self.equation = str(target)
       self.textprint.SetValue(self.equation)
    except SyntaxError:
       dlg = wx.MessageDialog(self,u'Error!',u'Attention', wx.OK|wx.ICON_INFORMATION)
       dlg.ShowModal()
       dlg.Destroy()
  def Onlog(self,event):
    string = float(self.equation)
    try:
       target=math.log(string)
       self.equation = str(target)
       self.textprint.SetValue(self.equation)
    except SyntaxError:
       dlg = wx.MessageDialog(self,u'Error!',u'Attention', wx.OK|wx.ICON_INFORMATION)
       dlg.ShowModal()
       dlg.Destroy()

  def Ondou(self,event):
    string = float(self.equation)
    target = math.pow(string,2)
    self.equation = str(target)
    self.textprint.SetValue(self.equation)

  def Onsin(self,event):
    string = float(self.equation)
    try:
       target=math.sin(string)
       self.equation = str(target)
       self.textprint.SetValue(self.equation)
    except SyntaxError:
       dlg = wx.MessageDialog(self,u'Error!',u'Attention', wx.OK|wx.ICON_INFORMATION)
       dlg.ShowModal()
       dlg.Destroy()

  def OnTarget(self,event):
    string = self.equation
    try:
        target = eval(string)
        self.equation = str(target)
        self.textprint.SetValue(self.equation)
    except SyntaxError:
       dlg = wx.MessageDialog(self,u'Error!',u'Attention', wx.OK|wx.ICON_INFORMATION)
       dlg.ShowModal()
       dlg.Destroy()

  def OnExit(self,event):
     self.Close()


if __name__ == '__main__':
  app = wx.App()
  CalcFrame(title='Calculator')
  app.MainLoop()
